/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ornl.adios.adioslib;

public class adioslib implements adioslibConstants {
  public static int MPI_Init(SWIGTYPE_p_int argc, SWIGTYPE_p_p_p_char argv) {
    return adioslibJNI.MPI_Init(SWIGTYPE_p_int.getCPtr(argc), SWIGTYPE_p_p_p_char.getCPtr(argv));
  }

  public static int MPI_Finalize() {
    return adioslibJNI.MPI_Finalize();
  }

  public static int MPI_Initialized(SWIGTYPE_p_int flag) {
    return adioslibJNI.MPI_Initialized(SWIGTYPE_p_int.getCPtr(flag));
  }

  public static int MPI_Barrier(int comm) {
    return adioslibJNI.MPI_Barrier(comm);
  }

  public static int MPI_Bcast(SWIGTYPE_p_void buffer, int count, int datatype, int root, int comm) {
    return adioslibJNI.MPI_Bcast(SWIGTYPE_p_void.getCPtr(buffer), count, datatype, root, comm);
  }

  public static int MPI_Comm_dup(int comm, SWIGTYPE_p_int newcomm) {
    return adioslibJNI.MPI_Comm_dup(comm, SWIGTYPE_p_int.getCPtr(newcomm));
  }

  public static int MPI_Comm_rank(int comm, SWIGTYPE_p_int rank) {
    return adioslibJNI.MPI_Comm_rank(comm, SWIGTYPE_p_int.getCPtr(rank));
  }

  public static int MPI_Comm_size(int comm, SWIGTYPE_p_int size) {
    return adioslibJNI.MPI_Comm_size(comm, SWIGTYPE_p_int.getCPtr(size));
  }

  public static int MPI_Comm_free(SWIGTYPE_p_int comm) {
    return adioslibJNI.MPI_Comm_free(SWIGTYPE_p_int.getCPtr(comm));
  }

  public static int MPI_Comm_f2c(int comm) {
    return adioslibJNI.MPI_Comm_f2c(comm);
  }

  public static int MPI_Gather(SWIGTYPE_p_void sendbuf, int sendcnt, int sendtype, SWIGTYPE_p_void recvbuf, int recvcnt, int recvtype, int root, int comm) {
    return adioslibJNI.MPI_Gather(SWIGTYPE_p_void.getCPtr(sendbuf), sendcnt, sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), recvcnt, recvtype, root, comm);
  }

  public static int MPI_Gatherv(SWIGTYPE_p_void sendbuf, int sendcnt, int sendtype, SWIGTYPE_p_void recvbuf, SWIGTYPE_p_int recvcnts, SWIGTYPE_p_int displs, int recvtype, int root, int comm) {
    return adioslibJNI.MPI_Gatherv(SWIGTYPE_p_void.getCPtr(sendbuf), sendcnt, sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), SWIGTYPE_p_int.getCPtr(recvcnts), SWIGTYPE_p_int.getCPtr(displs), recvtype, root, comm);
  }

  public static int MPI_Allgather(SWIGTYPE_p_void sendbuf, int sendcount, int sendtype, SWIGTYPE_p_void recvbuf, int recvcount, int recvtype, int comm) {
    return adioslibJNI.MPI_Allgather(SWIGTYPE_p_void.getCPtr(sendbuf), sendcount, sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), recvcount, recvtype, comm);
  }

  public static int MPI_Scatter(SWIGTYPE_p_void sendbuf, int sendcnt, int sendtype, SWIGTYPE_p_void recvbuf, int recvcnt, int recvtype, int root, int comm) {
    return adioslibJNI.MPI_Scatter(SWIGTYPE_p_void.getCPtr(sendbuf), sendcnt, sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), recvcnt, recvtype, root, comm);
  }

  public static int MPI_Scatterv(SWIGTYPE_p_void sendbuf, SWIGTYPE_p_int sendcnts, SWIGTYPE_p_int displs, int sendtype, SWIGTYPE_p_void recvbuf, int recvcnt, int recvtype, int root, int comm) {
    return adioslibJNI.MPI_Scatterv(SWIGTYPE_p_void.getCPtr(sendbuf), SWIGTYPE_p_int.getCPtr(sendcnts), SWIGTYPE_p_int.getCPtr(displs), sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), recvcnt, recvtype, root, comm);
  }

  public static int MPI_File_open(int comm, String filename, int amode, int info, SWIGTYPE_p_int fh) {
    return adioslibJNI.MPI_File_open(comm, filename, amode, info, SWIGTYPE_p_int.getCPtr(fh));
  }

  public static int MPI_File_close(SWIGTYPE_p_int fh) {
    return adioslibJNI.MPI_File_close(SWIGTYPE_p_int.getCPtr(fh));
  }

  public static int MPI_File_get_size(int fh, SWIGTYPE_p_unsigned_long_long size) {
    return adioslibJNI.MPI_File_get_size(fh, SWIGTYPE_p_unsigned_long_long.getCPtr(size));
  }

  public static int MPI_File_read(int fh, SWIGTYPE_p_void buf, int count, int datatype, SWIGTYPE_p_unsigned_long_long status) {
    return adioslibJNI.MPI_File_read(fh, SWIGTYPE_p_void.getCPtr(buf), count, datatype, SWIGTYPE_p_unsigned_long_long.getCPtr(status));
  }

  public static int MPI_File_seek(int fh, java.math.BigInteger offset, int whence) {
    return adioslibJNI.MPI_File_seek(fh, offset, whence);
  }

  public static int MPI_Get_count(SWIGTYPE_p_unsigned_long_long status, int datatype, SWIGTYPE_p_int count) {
    return adioslibJNI.MPI_Get_count(SWIGTYPE_p_unsigned_long_long.getCPtr(status), datatype, SWIGTYPE_p_int.getCPtr(count));
  }

  public static int MPI_Error_string(int errorcode, String string, SWIGTYPE_p_int resultlen) {
    return adioslibJNI.MPI_Error_string(errorcode, string, SWIGTYPE_p_int.getCPtr(resultlen));
  }

  public static int MPI_Comm_split(int comm, int color, int key, SWIGTYPE_p_int comm_out) {
    return adioslibJNI.MPI_Comm_split(comm, color, key, SWIGTYPE_p_int.getCPtr(comm_out));
  }

  public static int MPI_Get_processor_name(String name, SWIGTYPE_p_int resultlen) {
    return adioslibJNI.MPI_Get_processor_name(name, SWIGTYPE_p_int.getCPtr(resultlen));
  }

  public static double MPI_Wtime() {
    return adioslibJNI.MPI_Wtime();
  }

  public static void setAdios_errno(int value) {
    adioslibJNI.adios_errno_set(value);
  }

  public static int getAdios_errno() {
    return adioslibJNI.adios_errno_get();
  }

  public static String adios_errmsg() {
    return adioslibJNI.adios_errmsg();
  }

  public static int adios_read_init_method(ADIOS_READ_METHOD method, int comm, String parameters) {
    return adioslibJNI.adios_read_init_method(method.swigValue(), comm, parameters);
  }

  public static int adios_read_finalize_method(ADIOS_READ_METHOD method) {
    return adioslibJNI.adios_read_finalize_method(method.swigValue());
  }

  public static ADIOS_FILE adios_read_open(String fname, ADIOS_READ_METHOD method, int comm, ADIOS_LOCKMODE lock_mode, float timeout_sec) {
    long cPtr = adioslibJNI.adios_read_open(fname, method.swigValue(), comm, lock_mode.swigValue(), timeout_sec);
    return (cPtr == 0) ? null : new ADIOS_FILE(cPtr, false);
  }

  public static ADIOS_FILE adios_read_open_file(String fname, ADIOS_READ_METHOD method, int comm) {
    long cPtr = adioslibJNI.adios_read_open_file(fname, method.swigValue(), comm);
    return (cPtr == 0) ? null : new ADIOS_FILE(cPtr, false);
  }

  public static int adios_read_close(ADIOS_FILE fp) {
    return adioslibJNI.adios_read_close(ADIOS_FILE.getCPtr(fp), fp);
  }

  public static int adios_advance_step(ADIOS_FILE fp, int last, float timeout_sec) {
    return adioslibJNI.adios_advance_step(ADIOS_FILE.getCPtr(fp), fp, last, timeout_sec);
  }

  public static void adios_release_step(ADIOS_FILE fp) {
    adioslibJNI.adios_release_step(ADIOS_FILE.getCPtr(fp), fp);
  }

  public static ADIOS_VARINFO adios_inq_var(ADIOS_FILE fp, String varname) {
    long cPtr = adioslibJNI.adios_inq_var(ADIOS_FILE.getCPtr(fp), fp, varname);
    return (cPtr == 0) ? null : new ADIOS_VARINFO(cPtr, false);
  }

  public static ADIOS_VARINFO adios_inq_var_byid(ADIOS_FILE fp, int varid) {
    long cPtr = adioslibJNI.adios_inq_var_byid(ADIOS_FILE.getCPtr(fp), fp, varid);
    return (cPtr == 0) ? null : new ADIOS_VARINFO(cPtr, false);
  }

  public static void adios_free_varinfo(ADIOS_VARINFO cp) {
    adioslibJNI.adios_free_varinfo(ADIOS_VARINFO.getCPtr(cp), cp);
  }

  public static int adios_inq_var_stat(ADIOS_FILE fp, ADIOS_VARINFO varinfo, int per_step_stat, int per_block_stat) {
    return adioslibJNI.adios_inq_var_stat(ADIOS_FILE.getCPtr(fp), fp, ADIOS_VARINFO.getCPtr(varinfo), varinfo, per_step_stat, per_block_stat);
  }

  public static int adios_inq_var_blockinfo(ADIOS_FILE fp, ADIOS_VARINFO varinfo) {
    return adioslibJNI.adios_inq_var_blockinfo(ADIOS_FILE.getCPtr(fp), fp, ADIOS_VARINFO.getCPtr(varinfo), varinfo);
  }

  public static SWIGTYPE_p_ADIOS_LINK adios_inq_link_byid(ADIOS_FILE fp, int linkid) {
    long cPtr = adioslibJNI.adios_inq_link_byid(ADIOS_FILE.getCPtr(fp), fp, linkid);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ADIOS_LINK(cPtr, false);
  }

  public static void adios_free_linkinfo(SWIGTYPE_p_ADIOS_LINK linkinfo) {
    adioslibJNI.adios_free_linkinfo(SWIGTYPE_p_ADIOS_LINK.getCPtr(linkinfo));
  }

  public static SWIGTYPE_p_ADIOS_MESH adios_inq_mesh_byid(ADIOS_FILE fp, int meshid) {
    long cPtr = adioslibJNI.adios_inq_mesh_byid(ADIOS_FILE.getCPtr(fp), fp, meshid);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ADIOS_MESH(cPtr, false);
  }

  public static int adios_complete_meshinfo(ADIOS_FILE datafile, ADIOS_FILE meshfile, SWIGTYPE_p_ADIOS_MESH meshinfo) {
    return adioslibJNI.adios_complete_meshinfo(ADIOS_FILE.getCPtr(datafile), datafile, ADIOS_FILE.getCPtr(meshfile), meshfile, SWIGTYPE_p_ADIOS_MESH.getCPtr(meshinfo));
  }

  public static void adios_free_meshinfo(SWIGTYPE_p_ADIOS_MESH meshinfo) {
    adioslibJNI.adios_free_meshinfo(SWIGTYPE_p_ADIOS_MESH.getCPtr(meshinfo));
  }

  public static int adios_inq_var_meshinfo(ADIOS_FILE fp, ADIOS_VARINFO varinfo) {
    return adioslibJNI.adios_inq_var_meshinfo(ADIOS_FILE.getCPtr(fp), fp, ADIOS_VARINFO.getCPtr(varinfo), varinfo);
  }

  public static int adios_schedule_read(ADIOS_FILE fp, SWIGTYPE_p_ADIOS_SELECTION sel, String varname, int from_steps, int nsteps, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_schedule_read(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_ADIOS_SELECTION.getCPtr(sel), varname, from_steps, nsteps, SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_schedule_read_byid(ADIOS_FILE fp, SWIGTYPE_p_ADIOS_SELECTION sel, int varid, int from_steps, int nsteps, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_schedule_read_byid(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_ADIOS_SELECTION.getCPtr(sel), varid, from_steps, nsteps, SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_schedule_read_param(ADIOS_FILE fp, SWIGTYPE_p_ADIOS_SELECTION sel, String varname, int from_steps, int nsteps, String param, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_schedule_read_param(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_ADIOS_SELECTION.getCPtr(sel), varname, from_steps, nsteps, param, SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_schedule_read_byid_param(ADIOS_FILE fp, SWIGTYPE_p_ADIOS_SELECTION sel, int varid, int from_steps, int nsteps, String param, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_schedule_read_byid_param(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_ADIOS_SELECTION.getCPtr(sel), varid, from_steps, nsteps, param, SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_perform_reads(ADIOS_FILE fp, int blocking) {
    return adioslibJNI.adios_perform_reads(ADIOS_FILE.getCPtr(fp), fp, blocking);
  }

  public static int adios_check_reads(ADIOS_FILE fp, SWIGTYPE_p_p_ADIOS_VARCHUNK chunk) {
    return adioslibJNI.adios_check_reads(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_p_ADIOS_VARCHUNK.getCPtr(chunk));
  }

  public static void adios_free_chunk(SWIGTYPE_p_ADIOS_VARCHUNK chunk) {
    adioslibJNI.adios_free_chunk(SWIGTYPE_p_ADIOS_VARCHUNK.getCPtr(chunk));
  }

  public static int adios_get_attr(ADIOS_FILE fp, String attrname, SWIGTYPE_p_ADIOS_DATATYPES type, SWIGTYPE_p_int size, SWIGTYPE_p_p_void data) {
    return adioslibJNI.adios_get_attr(ADIOS_FILE.getCPtr(fp), fp, attrname, SWIGTYPE_p_ADIOS_DATATYPES.getCPtr(type), SWIGTYPE_p_int.getCPtr(size), SWIGTYPE_p_p_void.getCPtr(data));
  }

  public static int adios_get_attr_byid(ADIOS_FILE fp, int attrid, SWIGTYPE_p_ADIOS_DATATYPES type, SWIGTYPE_p_int size, SWIGTYPE_p_p_void data) {
    return adioslibJNI.adios_get_attr_byid(ADIOS_FILE.getCPtr(fp), fp, attrid, SWIGTYPE_p_ADIOS_DATATYPES.getCPtr(type), SWIGTYPE_p_int.getCPtr(size), SWIGTYPE_p_p_void.getCPtr(data));
  }

  public static String adios_type_to_string(ADIOS_DATATYPES type) {
    return adioslibJNI.adios_type_to_string(type.swigValue());
  }

  public static int adios_type_size(ADIOS_DATATYPES type, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_type_size(type.swigValue(), SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_get_grouplist(ADIOS_FILE fp, SWIGTYPE_p_p_p_char group_namelist) {
    return adioslibJNI.adios_get_grouplist(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_p_p_char.getCPtr(group_namelist));
  }

  public static int adios_group_view(ADIOS_FILE fp, int groupid) {
    return adioslibJNI.adios_group_view(ADIOS_FILE.getCPtr(fp), fp, groupid);
  }

  public static void adios_print_fileinfo(ADIOS_FILE fp) {
    adioslibJNI.adios_print_fileinfo(ADIOS_FILE.getCPtr(fp), fp);
  }

}
