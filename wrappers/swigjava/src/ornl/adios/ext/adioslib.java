/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ornl.adios.ext;

public class adioslib implements adioslibConstants {
  public static int MPI_Init(SWIGTYPE_p_int argc, SWIGTYPE_p_p_p_char argv) {
    return adioslibJNI.MPI_Init(SWIGTYPE_p_int.getCPtr(argc), SWIGTYPE_p_p_p_char.getCPtr(argv));
  }

  public static int MPI_Finalize() {
    return adioslibJNI.MPI_Finalize();
  }

  public static int MPI_Initialized(SWIGTYPE_p_int flag) {
    return adioslibJNI.MPI_Initialized(SWIGTYPE_p_int.getCPtr(flag));
  }

  public static int MPI_Barrier(int comm) {
    return adioslibJNI.MPI_Barrier(comm);
  }

  public static int MPI_Bcast(SWIGTYPE_p_void buffer, int count, int datatype, int root, int comm) {
    return adioslibJNI.MPI_Bcast(SWIGTYPE_p_void.getCPtr(buffer), count, datatype, root, comm);
  }

  public static int MPI_Comm_dup(int comm, SWIGTYPE_p_int newcomm) {
    return adioslibJNI.MPI_Comm_dup(comm, SWIGTYPE_p_int.getCPtr(newcomm));
  }

  public static int MPI_Comm_rank(int comm, SWIGTYPE_p_int rank) {
    return adioslibJNI.MPI_Comm_rank(comm, SWIGTYPE_p_int.getCPtr(rank));
  }

  public static int MPI_Comm_size(int comm, SWIGTYPE_p_int size) {
    return adioslibJNI.MPI_Comm_size(comm, SWIGTYPE_p_int.getCPtr(size));
  }

  public static int MPI_Comm_free(SWIGTYPE_p_int comm) {
    return adioslibJNI.MPI_Comm_free(SWIGTYPE_p_int.getCPtr(comm));
  }

  public static int MPI_Comm_f2c(int comm) {
    return adioslibJNI.MPI_Comm_f2c(comm);
  }

  public static int MPI_Gather(SWIGTYPE_p_void sendbuf, int sendcnt, int sendtype, SWIGTYPE_p_void recvbuf, int recvcnt, int recvtype, int root, int comm) {
    return adioslibJNI.MPI_Gather(SWIGTYPE_p_void.getCPtr(sendbuf), sendcnt, sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), recvcnt, recvtype, root, comm);
  }

  public static int MPI_Gatherv(SWIGTYPE_p_void sendbuf, int sendcnt, int sendtype, SWIGTYPE_p_void recvbuf, SWIGTYPE_p_int recvcnts, SWIGTYPE_p_int displs, int recvtype, int root, int comm) {
    return adioslibJNI.MPI_Gatherv(SWIGTYPE_p_void.getCPtr(sendbuf), sendcnt, sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), SWIGTYPE_p_int.getCPtr(recvcnts), SWIGTYPE_p_int.getCPtr(displs), recvtype, root, comm);
  }

  public static int MPI_Allgather(SWIGTYPE_p_void sendbuf, int sendcount, int sendtype, SWIGTYPE_p_void recvbuf, int recvcount, int recvtype, int comm) {
    return adioslibJNI.MPI_Allgather(SWIGTYPE_p_void.getCPtr(sendbuf), sendcount, sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), recvcount, recvtype, comm);
  }

  public static int MPI_Scatter(SWIGTYPE_p_void sendbuf, int sendcnt, int sendtype, SWIGTYPE_p_void recvbuf, int recvcnt, int recvtype, int root, int comm) {
    return adioslibJNI.MPI_Scatter(SWIGTYPE_p_void.getCPtr(sendbuf), sendcnt, sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), recvcnt, recvtype, root, comm);
  }

  public static int MPI_Scatterv(SWIGTYPE_p_void sendbuf, SWIGTYPE_p_int sendcnts, SWIGTYPE_p_int displs, int sendtype, SWIGTYPE_p_void recvbuf, int recvcnt, int recvtype, int root, int comm) {
    return adioslibJNI.MPI_Scatterv(SWIGTYPE_p_void.getCPtr(sendbuf), SWIGTYPE_p_int.getCPtr(sendcnts), SWIGTYPE_p_int.getCPtr(displs), sendtype, SWIGTYPE_p_void.getCPtr(recvbuf), recvcnt, recvtype, root, comm);
  }

  public static int MPI_Allreduce(SWIGTYPE_p_void sendbuf, SWIGTYPE_p_void recvbuf, int count, int datatype, mpi_operation op, int comm) {
    return adioslibJNI.MPI_Allreduce(SWIGTYPE_p_void.getCPtr(sendbuf), SWIGTYPE_p_void.getCPtr(recvbuf), count, datatype, op.swigValue(), comm);
  }

  public static int MPI_File_open(int comm, String filename, int amode, int info, SWIGTYPE_p_int fh) {
    return adioslibJNI.MPI_File_open(comm, filename, amode, info, SWIGTYPE_p_int.getCPtr(fh));
  }

  public static int MPI_File_close(SWIGTYPE_p_int fh) {
    return adioslibJNI.MPI_File_close(SWIGTYPE_p_int.getCPtr(fh));
  }

  public static int MPI_File_get_size(int fh, SWIGTYPE_p_unsigned_long_long size) {
    return adioslibJNI.MPI_File_get_size(fh, SWIGTYPE_p_unsigned_long_long.getCPtr(size));
  }

  public static int MPI_File_read(int fh, SWIGTYPE_p_void buf, int count, int datatype, SWIGTYPE_p_unsigned_long_long status) {
    return adioslibJNI.MPI_File_read(fh, SWIGTYPE_p_void.getCPtr(buf), count, datatype, SWIGTYPE_p_unsigned_long_long.getCPtr(status));
  }

  public static int MPI_File_seek(int fh, java.math.BigInteger offset, int whence) {
    return adioslibJNI.MPI_File_seek(fh, offset, whence);
  }

  public static int MPI_Get_count(SWIGTYPE_p_unsigned_long_long status, int datatype, SWIGTYPE_p_int count) {
    return adioslibJNI.MPI_Get_count(SWIGTYPE_p_unsigned_long_long.getCPtr(status), datatype, SWIGTYPE_p_int.getCPtr(count));
  }

  public static int MPI_Error_string(int errorcode, String string, SWIGTYPE_p_int resultlen) {
    return adioslibJNI.MPI_Error_string(errorcode, string, SWIGTYPE_p_int.getCPtr(resultlen));
  }

  public static int MPI_Comm_split(int comm, int color, int key, SWIGTYPE_p_int comm_out) {
    return adioslibJNI.MPI_Comm_split(comm, color, key, SWIGTYPE_p_int.getCPtr(comm_out));
  }

  public static int MPI_Get_processor_name(String name, SWIGTYPE_p_int resultlen) {
    return adioslibJNI.MPI_Get_processor_name(name, SWIGTYPE_p_int.getCPtr(resultlen));
  }

  public static double MPI_Wtime() {
    return adioslibJNI.MPI_Wtime();
  }

  public static void setAdios_errno(int value) {
    adioslibJNI.adios_errno_set(value);
  }

  public static int getAdios_errno() {
    return adioslibJNI.adios_errno_get();
  }

  public static String adios_errmsg() {
    return adioslibJNI.adios_errmsg();
  }

  public static int adios_read_init_method(ADIOS_READ_METHOD method, int comm, String parameters) {
    return adioslibJNI.adios_read_init_method(method.swigValue(), comm, parameters);
  }

  public static int adios_read_finalize_method(ADIOS_READ_METHOD method) {
    return adioslibJNI.adios_read_finalize_method(method.swigValue());
  }

  public static ADIOS_FILE adios_read_open(String fname, ADIOS_READ_METHOD method, int comm, ADIOS_LOCKMODE lock_mode, float timeout_sec) {
    long cPtr = adioslibJNI.adios_read_open(fname, method.swigValue(), comm, lock_mode.swigValue(), timeout_sec);
    return (cPtr == 0) ? null : new ADIOS_FILE(cPtr, false);
  }

  public static ADIOS_FILE adios_read_open_file(String fname, ADIOS_READ_METHOD method, int comm) {
    long cPtr = adioslibJNI.adios_read_open_file(fname, method.swigValue(), comm);
    return (cPtr == 0) ? null : new ADIOS_FILE(cPtr, false);
  }

  public static int adios_read_close(ADIOS_FILE fp) {
    return adioslibJNI.adios_read_close(ADIOS_FILE.getCPtr(fp), fp);
  }

  public static int adios_advance_step(ADIOS_FILE fp, int last, float timeout_sec) {
    return adioslibJNI.adios_advance_step(ADIOS_FILE.getCPtr(fp), fp, last, timeout_sec);
  }

  public static void adios_release_step(ADIOS_FILE fp) {
    adioslibJNI.adios_release_step(ADIOS_FILE.getCPtr(fp), fp);
  }

  public static ADIOS_VARINFO adios_inq_var(ADIOS_FILE fp, String varname) {
    long cPtr = adioslibJNI.adios_inq_var(ADIOS_FILE.getCPtr(fp), fp, varname);
    return (cPtr == 0) ? null : new ADIOS_VARINFO(cPtr, false);
  }

  public static ADIOS_VARINFO adios_inq_var_byid(ADIOS_FILE fp, int varid) {
    long cPtr = adioslibJNI.adios_inq_var_byid(ADIOS_FILE.getCPtr(fp), fp, varid);
    return (cPtr == 0) ? null : new ADIOS_VARINFO(cPtr, false);
  }

  public static void adios_free_varinfo(ADIOS_VARINFO cp) {
    adioslibJNI.adios_free_varinfo(ADIOS_VARINFO.getCPtr(cp), cp);
  }

  public static int adios_inq_var_stat(ADIOS_FILE fp, ADIOS_VARINFO varinfo, int per_step_stat, int per_block_stat) {
    return adioslibJNI.adios_inq_var_stat(ADIOS_FILE.getCPtr(fp), fp, ADIOS_VARINFO.getCPtr(varinfo), varinfo, per_step_stat, per_block_stat);
  }

  public static int adios_inq_var_blockinfo(ADIOS_FILE fp, ADIOS_VARINFO varinfo) {
    return adioslibJNI.adios_inq_var_blockinfo(ADIOS_FILE.getCPtr(fp), fp, ADIOS_VARINFO.getCPtr(varinfo), varinfo);
  }

  public static SWIGTYPE_p_ADIOS_LINK adios_inq_link_byid(ADIOS_FILE fp, int linkid) {
    long cPtr = adioslibJNI.adios_inq_link_byid(ADIOS_FILE.getCPtr(fp), fp, linkid);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ADIOS_LINK(cPtr, false);
  }

  public static void adios_free_linkinfo(SWIGTYPE_p_ADIOS_LINK linkinfo) {
    adioslibJNI.adios_free_linkinfo(SWIGTYPE_p_ADIOS_LINK.getCPtr(linkinfo));
  }

  public static SWIGTYPE_p_ADIOS_MESH adios_inq_mesh_byid(ADIOS_FILE fp, int meshid) {
    long cPtr = adioslibJNI.adios_inq_mesh_byid(ADIOS_FILE.getCPtr(fp), fp, meshid);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ADIOS_MESH(cPtr, false);
  }

  public static int adios_complete_meshinfo(ADIOS_FILE datafile, ADIOS_FILE meshfile, SWIGTYPE_p_ADIOS_MESH meshinfo) {
    return adioslibJNI.adios_complete_meshinfo(ADIOS_FILE.getCPtr(datafile), datafile, ADIOS_FILE.getCPtr(meshfile), meshfile, SWIGTYPE_p_ADIOS_MESH.getCPtr(meshinfo));
  }

  public static void adios_free_meshinfo(SWIGTYPE_p_ADIOS_MESH meshinfo) {
    adioslibJNI.adios_free_meshinfo(SWIGTYPE_p_ADIOS_MESH.getCPtr(meshinfo));
  }

  public static int adios_inq_var_meshinfo(ADIOS_FILE fp, ADIOS_VARINFO varinfo) {
    return adioslibJNI.adios_inq_var_meshinfo(ADIOS_FILE.getCPtr(fp), fp, ADIOS_VARINFO.getCPtr(varinfo), varinfo);
  }

  public static int adios_schedule_read(ADIOS_FILE fp, SWIGTYPE_p_ADIOS_SELECTION sel, String varname, int from_steps, int nsteps, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_schedule_read(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_ADIOS_SELECTION.getCPtr(sel), varname, from_steps, nsteps, SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_schedule_read_byid(ADIOS_FILE fp, SWIGTYPE_p_ADIOS_SELECTION sel, int varid, int from_steps, int nsteps, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_schedule_read_byid(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_ADIOS_SELECTION.getCPtr(sel), varid, from_steps, nsteps, SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_schedule_read_param(ADIOS_FILE fp, SWIGTYPE_p_ADIOS_SELECTION sel, String varname, int from_steps, int nsteps, String param, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_schedule_read_param(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_ADIOS_SELECTION.getCPtr(sel), varname, from_steps, nsteps, param, SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_schedule_read_byid_param(ADIOS_FILE fp, SWIGTYPE_p_ADIOS_SELECTION sel, int varid, int from_steps, int nsteps, String param, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_schedule_read_byid_param(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_ADIOS_SELECTION.getCPtr(sel), varid, from_steps, nsteps, param, SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_perform_reads(ADIOS_FILE fp, int blocking) {
    return adioslibJNI.adios_perform_reads(ADIOS_FILE.getCPtr(fp), fp, blocking);
  }

  public static int adios_check_reads(ADIOS_FILE fp, SWIGTYPE_p_p_ADIOS_VARCHUNK chunk) {
    return adioslibJNI.adios_check_reads(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_p_ADIOS_VARCHUNK.getCPtr(chunk));
  }

  public static void adios_free_chunk(SWIGTYPE_p_ADIOS_VARCHUNK chunk) {
    adioslibJNI.adios_free_chunk(SWIGTYPE_p_ADIOS_VARCHUNK.getCPtr(chunk));
  }

  public static int adios_get_attr(ADIOS_FILE fp, String attrname, SWIGTYPE_p_ADIOS_DATATYPES type, SWIGTYPE_p_int size, SWIGTYPE_p_p_void data) {
    return adioslibJNI.adios_get_attr(ADIOS_FILE.getCPtr(fp), fp, attrname, SWIGTYPE_p_ADIOS_DATATYPES.getCPtr(type), SWIGTYPE_p_int.getCPtr(size), SWIGTYPE_p_p_void.getCPtr(data));
  }

  public static int adios_get_attr_byid(ADIOS_FILE fp, int attrid, SWIGTYPE_p_ADIOS_DATATYPES type, SWIGTYPE_p_int size, SWIGTYPE_p_p_void data) {
    return adioslibJNI.adios_get_attr_byid(ADIOS_FILE.getCPtr(fp), fp, attrid, SWIGTYPE_p_ADIOS_DATATYPES.getCPtr(type), SWIGTYPE_p_int.getCPtr(size), SWIGTYPE_p_p_void.getCPtr(data));
  }

  public static String adios_type_to_string(ADIOS_DATATYPES type) {
    return adioslibJNI.adios_type_to_string(type.swigValue());
  }

  public static int adios_type_size(ADIOS_DATATYPES type, SWIGTYPE_p_void data) {
    return adioslibJNI.adios_type_size(type.swigValue(), SWIGTYPE_p_void.getCPtr(data));
  }

  public static int adios_get_grouplist(ADIOS_FILE fp, SWIGTYPE_p_p_p_char group_namelist) {
    return adioslibJNI.adios_get_grouplist(ADIOS_FILE.getCPtr(fp), fp, SWIGTYPE_p_p_p_char.getCPtr(group_namelist));
  }

  public static int adios_group_view(ADIOS_FILE fp, int groupid) {
    return adioslibJNI.adios_group_view(ADIOS_FILE.getCPtr(fp), fp, groupid);
  }

  public static void adios_print_fileinfo(ADIOS_FILE fp) {
    adioslibJNI.adios_print_fileinfo(ADIOS_FILE.getCPtr(fp), fp);
  }

  public static ADIOS_AVAILABLE_READ_METHODS adios_available_read_methods() {
    long cPtr = adioslibJNI.adios_available_read_methods();
    return (cPtr == 0) ? null : new ADIOS_AVAILABLE_READ_METHODS(cPtr, false);
  }

  public static void adios_available_read_methods_free(ADIOS_AVAILABLE_READ_METHODS arg0) {
    adioslibJNI.adios_available_read_methods_free(ADIOS_AVAILABLE_READ_METHODS.getCPtr(arg0), arg0);
  }

  public static int adios_init(String config, int comm) {
    return adioslibJNI.adios_init(config, comm);
  }

  public static int adios_is_initialized() {
    return adioslibJNI.adios_is_initialized();
  }

  public static int adios_finalize(int mype) {
    return adioslibJNI.adios_finalize(mype);
  }

  public static int adios_open(long[] fd, String group_name, String name, String mode, int comm) {
    return adioslibJNI.adios_open(fd, group_name, name, mode, comm);
  }

  public static int adios_group_size(long fd_p, java.math.BigInteger data_size, SWIGTYPE_p_unsigned_long_long total_size) {
    return adioslibJNI.adios_group_size(fd_p, data_size, SWIGTYPE_p_unsigned_long_long.getCPtr(total_size));
  }

  public static int adios_write(long fd_p, String name, SWIGTYPE_p_void var) {
    return adioslibJNI.adios_write(fd_p, name, SWIGTYPE_p_void.getCPtr(var));
  }

  public static int adios_get_write_buffer(long fd_p, String name, SWIGTYPE_p_unsigned_long_long size, SWIGTYPE_p_p_void buffer) {
    return adioslibJNI.adios_get_write_buffer(fd_p, name, SWIGTYPE_p_unsigned_long_long.getCPtr(size), SWIGTYPE_p_p_void.getCPtr(buffer));
  }

  public static int adios_read(long fd_p, String name, SWIGTYPE_p_void buffer, java.math.BigInteger buffer_size) {
    return adioslibJNI.adios_read(fd_p, name, SWIGTYPE_p_void.getCPtr(buffer), buffer_size);
  }

  public static int adios_set_path(long fd_p, String path) {
    return adioslibJNI.adios_set_path(fd_p, path);
  }

  public static int adios_set_path_var(long fd_p, String path, String name) {
    return adioslibJNI.adios_set_path_var(fd_p, path, name);
  }

  public static int adios_end_iteration() {
    return adioslibJNI.adios_end_iteration();
  }

  public static int adios_start_calculation() {
    return adioslibJNI.adios_start_calculation();
  }

  public static int adios_stop_calculation() {
    return adioslibJNI.adios_stop_calculation();
  }

  public static int adios_close(long fd_p) {
    return adioslibJNI.adios_close(fd_p);
  }

  public static int adios_init_noxml(int comm) {
    return adioslibJNI.adios_init_noxml(comm);
  }

  public static int adios_allocate_buffer(ADIOS_BUFFER_ALLOC_WHEN adios_buffer_alloc_when, java.math.BigInteger buffer_size) {
    return adioslibJNI.adios_allocate_buffer(adios_buffer_alloc_when.swigValue(), buffer_size);
  }

  public static void adios_set_max_buffer_size(java.math.BigInteger max_buffer_size_MB) {
    adioslibJNI.adios_set_max_buffer_size(max_buffer_size_MB);
  }

  public static int adios_declare_group(SWIGTYPE_p_long_long id, String name, String time_index, ADIOS_STATISTICS_FLAG stats) {
    return adioslibJNI.adios_declare_group(SWIGTYPE_p_long_long.getCPtr(id), name, time_index, stats.swigValue());
  }

  public static int adios_free_group(long id) {
    return adioslibJNI.adios_free_group(id);
  }

  public static int adios_set_time_aggregation(long groupid, java.math.BigInteger buffersize, long syncgroupid) {
    return adioslibJNI.adios_set_time_aggregation(groupid, buffersize, syncgroupid);
  }

  public static int adios_select_method(long group, String method, String parameters, String base_path) {
    return adioslibJNI.adios_select_method(group, method, parameters, base_path);
  }

  public static long adios_define_var(long group_id, String name, String path, ADIOS_DATATYPES type, String dimensions, String global_dimensions, String local_offsets) {
    return adioslibJNI.adios_define_var(group_id, name, path, type.swigValue(), dimensions, global_dimensions, local_offsets);
  }

  public static int adios_delete_vardefs(long id) {
    return adioslibJNI.adios_delete_vardefs(id);
  }

  public static java.math.BigInteger adios_expected_var_size(long var_id) {
    return adioslibJNI.adios_expected_var_size(var_id);
  }

  public static int adios_set_transform(long var_id, String transform_type_str) {
    return adioslibJNI.adios_set_transform(var_id, transform_type_str);
  }

  public static int adios_define_attribute(long group, String name, String path, ADIOS_DATATYPES type, String value, String var) {
    return adioslibJNI.adios_define_attribute(group, name, path, type.swigValue(), value, var);
  }

  public static int adios_define_attribute_byvalue(long group, String name, String path, ADIOS_DATATYPES type, int nelems, SWIGTYPE_p_void values) {
    return adioslibJNI.adios_define_attribute_byvalue(group, name, path, type.swigValue(), nelems, SWIGTYPE_p_void.getCPtr(values));
  }

  public static int adios_delete_attrdefs(long id) {
    return adioslibJNI.adios_delete_attrdefs(id);
  }

  public static int adios_write_byid(long fd_p, long id, SWIGTYPE_p_void var) {
    return adioslibJNI.adios_write_byid(fd_p, id, SWIGTYPE_p_void.getCPtr(var));
  }

  public static void adios_timing_write_xml(long fd_p, String filename) {
    adioslibJNI.adios_timing_write_xml(fd_p, filename);
  }

  public static int adios_define_schema_version(long group_id, String schema_version) {
    return adioslibJNI.adios_define_schema_version(group_id, schema_version);
  }

  public static int adios_define_var_mesh(long group_id, String varname, String meshname) {
    return adioslibJNI.adios_define_var_mesh(group_id, varname, meshname);
  }

  public static int adios_define_var_centering(long group_id, String varname, String centering) {
    return adioslibJNI.adios_define_var_centering(group_id, varname, centering);
  }

  public static int adios_define_mesh_file(long group_id, String name, String file) {
    return adioslibJNI.adios_define_mesh_file(group_id, name, file);
  }

  public static int adios_define_var_timesteps(String timesteps, long group_id, String name) {
    return adioslibJNI.adios_define_var_timesteps(timesteps, group_id, name);
  }

  public static int adios_define_var_timescale(String timescale, long group_id, String name) {
    return adioslibJNI.adios_define_var_timescale(timescale, group_id, name);
  }

  public static int adios_define_var_timeseriesformat(String timeseries, long group_id, String name) {
    return adioslibJNI.adios_define_var_timeseriesformat(timeseries, group_id, name);
  }

  public static int adios_define_var_hyperslab(String hyperslab, long group_id, String name) {
    return adioslibJNI.adios_define_var_hyperslab(hyperslab, group_id, name);
  }

  public static int adios_define_mesh_timevarying(String timevarying, long group_id, String name) {
    return adioslibJNI.adios_define_mesh_timevarying(timevarying, group_id, name);
  }

  public static int adios_define_mesh_timesteps(String timesteps, long group_id, String name) {
    return adioslibJNI.adios_define_mesh_timesteps(timesteps, group_id, name);
  }

  public static int adios_define_mesh_timescale(String timescale, long group_id, String name) {
    return adioslibJNI.adios_define_mesh_timescale(timescale, group_id, name);
  }

  public static int adios_define_mesh_timeseriesformat(String timeseries, long group_id, String name) {
    return adioslibJNI.adios_define_mesh_timeseriesformat(timeseries, group_id, name);
  }

  public static int adios_define_mesh_group(String group, long group_id, String name) {
    return adioslibJNI.adios_define_mesh_group(group, group_id, name);
  }

  public static int adios_define_mesh_uniform(String dimensions, String origin, String spacing, String maximum, String nspace, long group_id, String name) {
    return adioslibJNI.adios_define_mesh_uniform(dimensions, origin, spacing, maximum, nspace, group_id, name);
  }

  public static int adios_define_mesh_rectilinear(String dimensions, String coordinates, String nspace, long group_id, String name) {
    return adioslibJNI.adios_define_mesh_rectilinear(dimensions, coordinates, nspace, group_id, name);
  }

  public static int adios_define_mesh_structured(String dimensions, String points, String nspace, long group_id, String name) {
    return adioslibJNI.adios_define_mesh_structured(dimensions, points, nspace, group_id, name);
  }

  public static int adios_define_mesh_unstructured(String points, String data, String count, String cell_type, String npoints, String nspace, long group_id, String name) {
    return adioslibJNI.adios_define_mesh_unstructured(points, data, count, cell_type, npoints, nspace, group_id, name);
  }

  public static ADIOS_AVAILABLE_WRITE_METHODS adios_available_write_methods() {
    long cPtr = adioslibJNI.adios_available_write_methods();
    return (cPtr == 0) ? null : new ADIOS_AVAILABLE_WRITE_METHODS(cPtr, false);
  }

  public static void adios_available_write_methods_free(ADIOS_AVAILABLE_WRITE_METHODS arg0) {
    adioslibJNI.adios_available_write_methods_free(ADIOS_AVAILABLE_WRITE_METHODS.getCPtr(arg0), arg0);
  }

  public static int readvar_double(ADIOS_FILE fh, int varid, long[] start, long[] count, double[] double_arr) {
    return adioslibJNI.readvar_double(ADIOS_FILE.getCPtr(fh), fh, varid, start, count, double_arr);
  }

  public static int readvar_int(ADIOS_FILE fh, int varid, long[] start, long[] count, int[] int_arr) {
    return adioslibJNI.readvar_int(ADIOS_FILE.getCPtr(fh), fh, varid, start, count, int_arr);
  }

  public static int adios_write_double_arr(long fd_p, String name, double[] arr) {
    return adioslibJNI.adios_write_double_arr(fd_p, name, arr);
  }

  public static int adios_write_int_arr(long fd_p, String name, int[] arr) {
    return adioslibJNI.adios_write_int_arr(fd_p, name, arr);
  }

  public static int adios_write_double(long fd_p, String name, double value) {
    return adioslibJNI.adios_write_double(fd_p, name, value);
  }

  public static int adios_write_int(long fd_p, String name, int value) {
    return adioslibJNI.adios_write_int(fd_p, name, value);
  }

}
