
There is a bug in the buginxml application. We want to write out a 2D array 
with 2D decomposition of processes. If we run it with 4 processes with 2x2 
decomposition, each writing a 5x7 array, thus forming a global 10x14 array, 
it should look like this (each local array contains the rank of the writing 
process):

  double   data   {10, 14} 
    (0, 0)    0 0 0 0 0 0 0 2 2 2 2 2 2 2 
    (1, 0)    0 0 0 0 0 0 0 2 2 2 2 2 2 2 
    (2, 0)    0 0 0 0 0 0 0 2 2 2 2 2 2 2 
    (3, 0)    0 0 0 0 0 0 0 2 2 2 2 2 2 2 
    (4, 0)    0 0 0 0 0 0 0 2 2 2 2 2 2 2 
    (5, 0)    1 1 1 1 1 1 1 3 3 3 3 3 3 3 
    (6, 0)    1 1 1 1 1 1 1 3 3 3 3 3 3 3 
    (7, 0)    1 1 1 1 1 1 1 3 3 3 3 3 3 3 
    (8, 0)    1 1 1 1 1 1 1 3 3 3 3 3 3 3 
    (9, 0)    1 1 1 1 1 1 1 3 3 3 3 3 3 3 

Instead, when we run this application and print with bpls, we see the following:

$ bpls -l buginxml.bp -d data -n 14
  double   data         {10, 14} = 0 / 3 / 1.5 / 1.11803 
    (0, 0)    0 0 0 0 0 1 1 1 1 1 1 1 0 0 
    (1, 0)    0 0 0 0 0 1 1 1 1 1 1 1 0 0 
    (2, 0)    0 0 0 0 0 1 1 1 1 1 1 1 0 0 
    (3, 0)    0 0 0 0 0 1 1 1 1 1 1 1 0 0 
    (4, 0)    0 0 0 0 0 1 1 1 1 1 1 1 0 0 
    (5, 0)    0 0 0 0 0 0 0 0 0 0 0 0 0 0 
    (6, 0)    0 0 0 0 0 0 0 0 0 0 0 0 0 0 
    (7, 0)    2 2 2 2 2 3 3 3 3 3 3 3 0 0 
    (8, 0)    2 2 2 2 2 3 3 3 3 3 3 3 0 0 
    (9, 0)    2 2 2 2 2 3 3 3 3 3 3 3 0 0 



