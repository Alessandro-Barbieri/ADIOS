//
// Automatically generated by skel. Modify at your own risk.

##include "adios.h"
##include "mpi.h"
##include "skel/skel_xml_output.h"
##include <stdlib.h>
##include <stdio.h>

int main (int argc, char ** argv)
{

MPI_Init (&argc, &argv);

double skel_init_timer = 0;
double skel_open_timer = 0;
double skel_access_timer = 0;
double skel_close_timer = 0;
double skel_total_timer = 0;

// Time the init
MPI_Barrier (MPI_COMM_WORLD);
skel_init_timer -= MPI_Wtime();

adios_init ("gen_skel.xml", MPI_COMM_WORLD);
skel_init_timer += MPI_Wtime();

int skel_mpi_size, skel_mpi_rank, skel_i;
uint64_t adios_groupsize;
MPI_Comm_rank (MPI_COMM_WORLD, &skel_mpi_rank);
MPI_Comm_size (MPI_COMM_WORLD, &skel_mpi_size);

int64_t adios_handle;
uint64_t skel_total_size;

// Scalar declarations
int offy;
int ndx;
int gndx;
int gndy;
int nproc;
int npz;
int gndz;
int npy;
int ndz;
int ndy;
int offz;
int npx;
int offx;
gndx = 128;
gndy = 128;
gndz = 128;
nproc = 128;
npx = 128;
npy = 128;
npz = 128;
offx = 128;
offy = 128;
offz = 128;
ndx = 128;
ndy = 128;
ndz = 128;

// Array declarations

double * double_xyz;
double_xyz = (double*) malloc (ndx*ndy*ndz * sizeof (double) );
for (skel_i = 0; skel_i < ndx*ndy*ndz; skel_i++) 
    double_xyz[skel_i] = (double) skel_mpi_rank;
double_xyz = (double*) malloc (ndx*ndy*ndz * sizeof (double) );
for (skel_i = 0; skel_i < ndx*ndy*ndz; skel_i++) 
    double_xyz[skel_i] = (double) skel_mpi_rank;
double_xyz = (double*) malloc (ndx*ndy*ndz * sizeof (double) );
for (skel_i = 0; skel_i < ndx*ndy*ndz; skel_i++) 
    double_xyz[skel_i] = (double) skel_mpi_rank;
double_xyz = (double*) malloc (ndx*ndy*ndz * sizeof (double) );
for (skel_i = 0; skel_i < ndx*ndy*ndz; skel_i++) 
    double_xyz[skel_i] = (double) skel_mpi_rank;
double_xyz = (double*) malloc (ndx*ndy*ndz * sizeof (double) );
for (skel_i = 0; skel_i < ndx*ndy*ndz; skel_i++) 
    double_xyz[skel_i] = (double) skel_mpi_rank;
double_xyz = (double*) malloc (ndx*ndy*ndz * sizeof (double) );
for (skel_i = 0; skel_i < ndx*ndy*ndz; skel_i++) 
    double_xyz[skel_i] = (double) skel_mpi_rank;
double_xyz = (double*) malloc (ndx*ndy*ndz * sizeof (double) );
for (skel_i = 0; skel_i < ndx*ndy*ndz; skel_i++) 
    double_xyz[skel_i] = (double) skel_mpi_rank;
double_xyz = (double*) malloc (ndx*ndy*ndz * sizeof (double) );
for (skel_i = 0; skel_i < ndx*ndy*ndz; skel_i++) 
    double_xyz[skel_i] = (double) skel_mpi_rank;
double_xyz = (double*) malloc (ndx*ndy*ndz * sizeof (double) );
for (skel_i = 0; skel_i < ndx*ndy*ndz; skel_i++) 
    double_xyz[skel_i] = (double) skel_mpi_rank;

for (skel_i = 0; skel_i < 1; skel_i++){

// Time the opens
MPI_Barrier (MPI_COMM_WORLD);
skel_open_timer -= MPI_Wtime();
skel_total_timer -= MPI_Wtime();
MPI_Comm comm = MPI_COMM_WORLD;
adios_open(&adios_handle, "genarray", "out_genarray_write.bp", "w", comm);
skel_open_timer += MPI_Wtime();

// Time the writes
skel_access_timer -= MPI_Wtime();

// Set the adios group size
adios_groupsize =
                     4 +
                     4 +
                     4 +
                     4 +
                     4 +
                     4 +
                     4 +
                     4 +
                     4 +
                     4 +
                     4 +
                     4 +
                     4 +
                     8 * (ndx) * (ndy) * (ndz) +
                     8 * (ndx) * (ndy) * (ndz) +
                     8 * (ndx) * (ndy) * (ndz) +
                     8 * (ndx) * (ndy) * (ndz) +
                     8 * (ndx) * (ndy) * (ndz) +
                     8 * (ndx) * (ndy) * (ndz) +
                     8 * (ndx) * (ndy) * (ndz) +
                     8 * (ndx) * (ndy) * (ndz) +
                     8 * (ndx) * (ndy) * (ndz) ;
adios_group_size (adios_handle, adios_groupsize, &skel_total_size);

// Write each variable
adios_write (adios_handle, "gndx", &gndx);
adios_write (adios_handle, "gndy", &gndy);
adios_write (adios_handle, "gndz", &gndz);
adios_write (adios_handle, "nproc", &nproc);
adios_write (adios_handle, "npx", &npx);
adios_write (adios_handle, "npy", &npy);
adios_write (adios_handle, "npz", &npz);
adios_write (adios_handle, "offx", &offx);
adios_write (adios_handle, "offy", &offy);
adios_write (adios_handle, "offz", &offz);
adios_write (adios_handle, "ndx", &ndx);
adios_write (adios_handle, "ndy", &ndy);
adios_write (adios_handle, "ndz", &ndz);
adios_write (adios_handle, "var1", double_xyz);
adios_write (adios_handle, "var2", double_xyz);
adios_write (adios_handle, "var3", double_xyz);
adios_write (adios_handle, "var4", double_xyz);
adios_write (adios_handle, "var5", double_xyz);
adios_write (adios_handle, "var6", double_xyz);
adios_write (adios_handle, "var7", double_xyz);
adios_write (adios_handle, "var8", double_xyz);
adios_write (adios_handle, "var9", double_xyz);

// Stop timing the writes
skel_access_timer += MPI_Wtime();

// Time the closes
skel_close_timer -= MPI_Wtime();
adios_close (adios_handle);
skel_close_timer += MPI_Wtime();}
skel_total_timer += MPI_Wtime();

// Output results

 skel_write_coarse_xml_data (skel_open_timer, skel_access_timer, skel_close_timer, skel_total_timer);
double skel_total_init, skel_total_open, skel_total_access, skel_total_close, skel_total_total;
MPI_Reduce (&skel_init_timer, &skel_total_init, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);
MPI_Reduce (&skel_open_timer, &skel_total_open, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);
MPI_Reduce (&skel_access_timer, &skel_total_access, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);
MPI_Reduce (&skel_close_timer, &skel_total_close, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);
MPI_Reduce (&skel_total_timer, &skel_total_total, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);
if (skel_mpi_rank == 0) {
    fprintf (stdout, "\n");
    fprintf (stdout, "\n*************************");
    fprintf (stdout, "\n   Groupsize: %lli", adios_groupsize);
    fprintf (stdout, "\n  Open Time: %f", skel_total_open);
    fprintf (stdout, "\nAccess Time: %f", skel_total_access);
    fprintf (stdout, "\n Close Time: %f", skel_total_close);
    fprintf (stdout, "\n Total Time: %f", skel_total_total);
    fprintf (stdout, "\n*************************");
    fprintf (stdout, "\n");
}

// Free the arrays
free (double_xyz);

// Clean up
adios_finalize(0);
MPI_Finalize();
}
